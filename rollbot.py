from requests.exceptions import ConnectionError
from requests.exceptions import ReadTimeout
import time
import threading
import sys
import logging
import re

from settings import API_TOKEN1
import telebot

import fatal
import dice

import random
from bs4 import BeautifulSoup


# Command list handler function
def commands_handler(cmnds, inline=False):
    BOT_NAME = '@rollclub_bot'

    def wrapped(msg):
        if not msg.text:
            return False
        split_message = re.split(r'[^\w@\/]', msg.text)
        if not inline:
            s = split_message[0]
            return (s in cmnds) or (s.endswith(BOT_NAME) and s.split('@')[0] in cmnds)
        else:
            return any(cmnd in split_message or cmnd + BOT_NAME in split_message for cmnd in cmnds)

    return wrapped

text_messages = {
    'help':
        u'–í–æ –º–Ω–æ–≥–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ –º–Ω–æ–≥–æ –ø–µ—á–∞–ª–∏; –∏ –∫—Ç–æ —É–º–Ω–æ–∂–∞–µ—Ç –ø–æ–∑–Ω–∞–Ω–∏—è, —É–º–Ω–æ–∂–∞–µ—Ç —Å–∫–æ—Ä–±—å.\n'
        u'–ù–æ –∏—â—É—â–µ–º—É –∑–Ω–∞–Ω–∏—è —è –ø–æ–≤–µ–¥–∞—é —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n'
        u'/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
        u'/roll - –±—Ä–æ—Å–∫–∏ –¥–∞–π—Å–æ–≤\n'
        u'/r - –∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è /roll\n'
        u'/rf - –±—Ä–æ—Å–æ–∫ –≤ FATE\n'
        u'/rg - –±—Ä–æ—Å–æ–∫ –≤ GURPS\n'
        u'/fatal - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —ç—Ç—É —Å –±–æ–ª—å—à–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é\n'
        u'/gurps - –Ω–∞–∫–∏–Ω—å —Å–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω—É —á—Ç–æ –∂–µ —Ç—ã, —Å–∫–æ—Ä–µ–µ!\n',

    'start':
        u'Bot enabled...\n'
        u'Protocol alpha is running...\n'
        u'System has confirmed your access...\n'
        u'You are welcome to use!\n'
        u'For more information use command /help\n'
}

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

bot = telebot.TeleBot(API_TOKEN1, threaded=False)

# ---- DUEL ----


class Duel:
    def __init__(self):
        self.users = []
        self.status = [0, 0]
        self.active = False
        self.symbol = None

    def init_with_msg(self, msg):
        first_user = self.handle_user(msg.from_user)
        self.users.append(first_user)
        print('Init with message: first usr: ' + str(first_user))

        if not hasattr(msg, 'entities'):
            return

        for ent in msg.entities:
            if ent.type == 'mention':
                second_user = msg.text[ent.offset+1:ent.offset+ent.length]
                break
            if ent.type == 'text_mention':
                second_user = ent.user
                break

        if not self.compare_users(first_user, second_user):
            self.users.append(second_user)
            print('Second usr: ' + str(second_user))

    @staticmethod
    def handle_user(usr):
        if hasattr(usr, 'username') and \
           usr.username is not None:
            return usr.username
        else:
            return usr

    @staticmethod
    def compare_users(usr1, usr2):
        if hasattr(usr1, 'id') and hasattr(usr2, 'id') :
            return usr1.id == usr2.id
        if hasattr(usr1, 'username'):
            return usr1.username == usr2
        if hasattr(usr2, 'username'):
            return usr2.username == usr1
        return usr1 == usr2

    def name(self, usr_num):
        usr = self.users[usr_num] # self.first_usr if usr_num == 1 else self.second_usr
        if hasattr(usr, 'first_name'):
            return '<a href="tg://user?id={}">{}</a>'.format(usr.id, usr.first_name)
        else:
            return '@'+usr

    def usr_num(self, user):
        try:
            num = self.users.index(user.username)
            return num
        except Exception:
            pass

        for i in range(len(self.users)):
            usr = self.users[i]
            if hasattr(usr, 'id') and usr.id == user.id:
                return i

        return -1


DUELS = {}


# Handle shoots of players
@bot.message_handler(func=lambda m: m.chat.id in DUELS and
                                    DUELS[m.chat.id].symbol and
                                    DUELS[m.chat.id].usr_num(m.from_user) != -1,
                     content_types=['text'])
def duel_shoots(message):
    duel = DUELS[message.chat.id]

    num = duel.usr_num(message.from_user)
    if message.text[0] == duel.symbol:
        if duel.status[num] == 0:
            duel.status[num] = 1
            duel.symbol = None
            bot.reply_to(message,
                         '{} –≤—ã—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–π –ø–∏—Å—Ç–æ–ª–µ—Ç ' \
                         '–∏ —Ç–æ—á–Ω—ã–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º —É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!'.format(duel.name(num)),
                         parse_mode='HTML')
            DUELS.pop(message.chat.id)
        else:
            bot.reply_to(message, '–ü–∏—Å—Ç–æ–ª–µ—Ç —Ä–∞–∑—Ä—è–∂–µ–Ω!!!')
    else:
        if duel.status[num] == 0:
            duel.status[num] = -1
            bot.reply_to(message, '–û—Å–µ—á–∫–∞!')
            if not 0 in duel.status:
                bot.send_message(message.chat.id, '–û–±–∞ —Å—Ç—Ä–µ–ª–∫–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å. –î—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞ –±–µ–∑ –∂–µ—Ä—Ç–≤.')
                DUELS.pop(message.chat.id)
        else:
            bot.reply_to(message, '–ü–∞—Ç—Ä–æ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—å!')


# Handle all messages during duel
@bot.message_handler(func=lambda m: m.chat.id in DUELS and
                                    DUELS[m.chat.id].active and
                                    DUELS[m.chat.id].usr_num(m.from_user) == -1,
                     content_types=['text'])
def duel_stub(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–î—É—ç–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ –º–µ—à–∞–π –µ–π!')


# Handle '/duel'
@bot.message_handler(func=commands_handler(['/duel'], inline=True))
def duel_start(message):
    chat_id = message.chat.id
    duel = DUELS[chat_id] if chat_id in DUELS else None

    # –µ—Å–ª–∏ —á—É–≤–∞–∫–∞ –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å –∏ –æ–Ω –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É, –¥—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
    if duel and \
       duel.compare_users(message.from_user, duel.users[1]) and \
       not duel.active:
        duel.active = True
        t = threading.Thread(target=bomm, args=(message,))
        t.daemon = True
        t.start()
        return

    # –∏–Ω–∞—á–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥—É—ç–ª—å
    duel = Duel()
    duel.init_with_msg(message)
    if len(duel.users) == 2:
        DUELS[chat_id] = duel
        bot.send_message(chat_id, '–í—ã–∑–æ–≤ –±—Ä–æ—à–µ–Ω! –ü–æ—Å–ª–µ–¥—É–µ—Ç –ª–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç?')
    else:
        bot.reply_to(message, '–ù–∞–¥–æ —É–ø–æ–º—è–Ω—É—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –∫–∏–¥–∞–µ—à—å –≤—ã–∑–æ–≤!')


def bomm(message):
    chat_id = message.chat.id
    duel = DUELS[chat_id]
    num_of_bom = 5 + random.randint(0, 4)
    text = '–ù–∞ –≥–ª–∞–≤–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –≥–æ—Ä–æ–¥–∞ —Å–æ—à–ª–∏—Å—å –∑–∞–∫–ª—è—Ç—ã–µ –≤—Ä–∞–≥–∏ {} –∏ {}.\n' \
           '–ß–∞—Å—ã –±—å—é—Ç <b>{} —á–∞—Å–æ–≤</b>. ' \
           '–ö–æ–≥–¥–∞ –ø—Ä–æ–∑–≤—É—á–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–¥–∞—Ä, –æ–±–∞ —Å—Ç—Ä–µ–ª—è—é—Ç.\n' \
           '–° –ø–æ—Å–ª–µ–¥–Ω–∏–º —É–¥–∞—Ä–æ–º –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å.\n' \
           '–£ –∫–æ–≥–æ —Ä—É–∫–∞ –æ–∫–∞–∂–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ, —Ç–æ—Ç –≤—ã–∏–≥—Ä–∞–µ—Ç –¥—É—ç–ª—å.'.format(duel.name(0), duel.name(1), num_of_bom)
    bot.send_message(chat_id, text, parse_mode='HTML')

    for i in range(num_of_bom):
        time.sleep(random.randint(2, 10))
        bot.send_message(chat_id, '–ë{}–ú'.format('–û' * random.randint(1, 10)))

    duel_symbols = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', ',', '‚Ññ', '¬ß', '~', '—ë', '–π', 'z', 'G', 'F', 'üòÄ', 'ü§£', 'üò±']
    duel.symbol = random.choice(duel_symbols)
    bot.send_message(chat_id, '–°—Ç—Ä–µ–ª—è–π—Ç–µ—Å—å: ' + duel.symbol)

    # ---- INFO ----


# Handle '/start'
@bot.message_handler(func=commands_handler(['/start']))
def send_welcome(message):
    bot.reply_to(message, text_messages['start'])


# Handle '/help'
@bot.message_handler(func=commands_handler(['/help']))
def help(message):
    bot.reply_to(message, text_messages['help'])

# ---- FATAL ----


# Handle '/fatal'
@bot.message_handler(func=commands_handler(['/fatal']))
def fatal_message(message):
    # title = ''
    # if message.chat.type != 'private':
    #         title = fatal.user_to_author(message.from_user)
    # title += '*>> /fatal*\n\n'

    dsc = fatal.create_description()
    bot.send_message(message.chat.id,
                     dsc['text'],
                     parse_mode='Markdown',
                     reply_markup=dsc['buttons'])


@bot.callback_query_handler(func=lambda call: call.data.split(' ')[0] == 'f')
def fatal_callback(call):
    dsc = fatal.create_description(call)
    add_fatal_dsc_to(call.message, dsc)


def add_fatal_dsc_to(msg, dsc):
    text = fatal.escape_markdown(msg.text) + '\n\n' + dsc['text']
    if text.count('>>') >= 3:
        if msg.chat.type == 'private':
            text = '>>' + text[2:].split('>>', maxsplit=1)[1]
        else:
            at_symb = text.find('@', 1)
            dl_symb = text.find('$', 1)
            if at_symb < dl_symb or dl_symb == -1:
                text = '@' + text[1:].split('@', maxsplit=1)[1]
            else:
                text = '$' + text[1:].split('$', maxsplit=1)[1]

    bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=msg.message_id,
        text=text,
        reply_markup=dsc['buttons'],
        parse_mode='Markdown'
        )


# Handle '/editfatal'
@bot.message_handler(func=commands_handler(['/editfatal']))
def editfatal(message):
    bot.reply_to(message, '–í–∫–∏–¥—ã–≤–∞–π —Ñ–∞–π–ª:')
    bot.register_next_step_handler(message, fatal_file)


def fatal_file(message):
    if message.document:
        ''' 
        fatal.Editor.delete_all()

        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)
        with open('locations.xml', 'wb') as new_file:
            new_file.write(file)
        with open('locations.xml', 'r') as read_file:
            fatal.Editor.import_from_file(read_file)
        '''
        bot.reply_to(message, '–î–æ–±–∞–≤–ª–µ–Ω–æ!')

# ---- ----
# ---- Different rolls ----


# Handle '/roll' 'r'
@bot.message_handler(func=commands_handler(['/roll', '/r']))
def roll(message):
    arg = message.text.split(' ')
    if len(arg) > 1:
        try:
            result = dice.roll(arg[1])
            bot.reply_to(message, "–í—ã –≤—ã–∫–∏–Ω—É–ª–∏:\n"+str(result))
        except:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.")
    else:
        bot.reply_to(message, u'–í–∂—É—Ö:\n'+str(dice.roll('4d6')))


# Handle '/rf'
@bot.message_handler(func=commands_handler(['/rf']))
def rollFate(message):
    roll = dice.roll('4d3')
    result = 0
    text = u"–í—ã –≤—ã–∫–∏–Ω—É–ª–∏:\n"
    for i in roll:
        if i == 1:
            text += "[-]"
        elif i == 2:
            text += "[0]"
        else:
            text += "[+]"
        result += i-2

    arg = message.text.split(' ')
    if len(arg) > 1:
        text += "+"+arg[1]
        result += int(arg[1])

    text += '=\n{0}'.format(result)
    bot.reply_to(message, text)


# Handle '/rg'
@bot.message_handler(func=commands_handler(['/rg']))
def rollGURPS(message):
    arg = message.text.split(' ')
    roll = dice.roll('3d6t')
    text = str(roll)
    if len(arg) > 1:
        if roll > int(arg[1]):
            text += " > "+arg[1]+u"\n–ü—Ä–æ–≤–∞–ª"
        else:
            text += " ‚â§ "+arg[1]+u"\n–£—Å–ø–µ—Ö"
    bot.reply_to(message, text)


# ---- GURPS ----


# Handle '/gurps'
@bot.message_handler(func=commands_handler(['/gurps', '/GURPS']))
def gurps(message):
    with open('gurps.xml', 'r') as gurps_file:
        soup = BeautifulSoup(gurps_file, 'lxml')
        abilities = soup.find_all('gurps')
        ab = random.choice(abilities)
        bot.reply_to(message, ab.text, parse_mode='Markdown')


# Handle '/editgurpsl'
@bot.message_handler(func=commands_handler(['/editgurps']))
def editgurps(message):
    bot.reply_to(message, '–í–∫–∏–¥—ã–≤–∞–π —Ñ–∞–π–ª:')
    bot.register_next_step_handler(message, gurps_file)


def gurps_file(message):
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)
        with open('gurps.xml', 'wb') as new_file:
            new_file.write(file)
        bot.reply_to(message, '–î–æ–±–∞–≤–ª–µ–Ω–æ!')

# ---- NOT-COMAND HANDLERS ---- #


@bot.message_handler(func=lambda m: True, content_types=['new_chat_members'])
def new_chat_participant(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø—É—Ç–Ω–∏–∫!')


# ---- POLLING ---- #

while __name__ == '__main__':
    try:
        bot.polling(none_stop=True, interval=1)
        time.sleep(1)

    # –∏–∑-–∑–∞ Telegram API –∏–Ω–æ–≥–¥–∞ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–∞–∫–µ—Ç –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç
    except ReadTimeout as e:
        print('{0}: Read Timeout. Because of Telegram API.\n '
              'We are offline. Reconnecting in 5 seconds.\n'.format(time.time()))
        time.sleep(5)

    # –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    except ConnectionError as e:
        print('{0}: Connection Error.\n'
              'We are offline. Reconnecting in 60 seconds.\n'.format(time.time()))
        time.sleep(60)

    # –µ—Å–ª–∏ Python —Å–¥—É—Ä–∏—Ç –∏ –ø–æ–π–¥—ë—Ç –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é —Ä–µ–∫—É—Ä—Å–∏—é (–Ω–µ –æ—Å–æ–±–æ —Å–ø–∞—Å–∞–µ—Ç)
    except RuntimeError as e:
        print('{0}: Runtime Error.\n'
              'Retrying in 3 seconds.\n'.format(time.time()))
        time.sleep(3)

    # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º Ctrl-C
    except KeyboardInterrupt as e:
        print('\n{0}: Keyboard Interrupt. Good bye.\n'.format(time.time()))
        sys.exit()

    # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ ‚Äî –æ—Ç –≥—Ä–µ—Ö–∞ –≤—ã—Ä—É–±–∞–µ–º —Å –∫–æ—Ä–Ω–µ–º. –°–æ–∑–¥–∞—ë–º –∞–ª—ë—Ä—Ç —Ñ–∞–π–ª –¥–ª—è .sh —Å–∫—Ä–∏–ø—Ç–∞
    except Exception as e:
        print('{0}: Unknown Exception:\n'
              '{1}: {2}\n\n'
              'Shutting down.'.format(time.time(), str(e), e.args))
